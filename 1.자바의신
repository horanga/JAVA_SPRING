1. 상속과 구현의 차이점

사용방식의 차이점

uml에서 is a, can do

상속의 목적 : 확장성이 중점

구현의 목적 : 코드의 재사용성 - 메서드 레벨에서의 재사용성

- 추상화가 뭔지
    
    공통된 것을 뽑아냄
    
    내용을 뽑아냄
    
- absract class의 생성자가 있으면 자식 클래스의 생성자는 어떻게 해야하는지
    
    명시적으로 해놓는 것이 좋음
    
- 다중 상속이 안되는 이유
    
    다중 상속을 하면 어디에 소속되어 있는지 모름
    
- 인터페이스가 다중 구현이 가능한 이유
    
    인터페이스는 행위에 대한 것을 정의 따라서 다중 구현이 가능함
    
    어떠한 행위이기 때문
    
- 디폴트를 통해서 기본적인 내용을 담을 수 있음→ 인터페이스가 더 좋지 않냐
    
    abstract를 구현하는 것은
    
    반드시 모든 구현을 안해도 됨
    
    역할을 떠넘길 수 있음
    
    interface를 구현하는 클래스는 모든 메서드를 구현해야함
    
    인터페이스는 행위에 대한 것을 정의
    
- 자바 8에서 디폴트 메서드가 추가 된 이유가 무엇인가요

2. 객체지향이 무엇인지 설명해주세요 

현실세계를 모방해서 부품을 모듈화 시킴

- 객체와 클래스의 차이점
    
    클래스는 하나의 설계도
    상태와 행동이 있음
    
    객체는 그 클래스를 기반으로 해서 만듦
    
- 클래스와 인터페이스의 차이점
    
    클래스는 내용 바디가 나와 있는거
    인터페이스는 추상화된 것
    
- 오버로딩이 다형성인가?
    
    하나의 시그니쳐로 만들어 놓고 뻗어나가기 떄문에 다형성에 개념에 포함이 됨
    
- 4가지 특징
    
    다형성 등등 설명함
    
- 가장 중요한 원칙

3. String 클래스의 단점이 있다면 무엇일까요? 

재할당 마다 새로운 객체 생성

- Java 신버전에서 위 단점을 해결하였다 어떻게 해결되었나요?
    - 컴파일단계에서 StringBuilder 으로 변환된다. append() 메소드
    - 단, 반복문 내부에서는 해결 안됨.

- 몇 번의 수정이 일어났을 때 부터 유의미한 성능차이가 발생하나요?
    - 10~20번의 수정

- String의 불변성을 보장하기 위한 구조는, 변화를 전혀 할 수 없나요?
    - 새로운 객체를 만들기 때문에 불변을 보장한다.
    - reflection을 통해 수정될 수 있다 > 추가 조사 필요

- String은 참조자료형임에도 불구하고, 동일한 값을 갖는 두 객체(변수)에 == 연산의 결과가 True 입니다. 그 이유는 무엇일까요?
    - 둘다 string 리터럴인 경우에 true

- String tokenizer와 split의 차이
